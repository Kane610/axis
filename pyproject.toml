[build-system]
requires = ["setuptools==68.0.0", "wheel==0.40.0"]
build-backend = "setuptools.build_meta"

[project]
name        = "axis"
version     = "57"
license     = {text = "MIT"}
description = "A Python library for communicating with devices from Axis Communications"
readme      = "README.md"
authors     = [{name = "Robert Svensson", email = "Kane610@users.noreply.github.com"}]
keywords    = ["axis", "vapix", "homeassistant"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3.11",
    "Topic :: Home Automation",
]
requires-python = ">=3.11.0"
dependencies    = [
    "httpx>=0.26",
    "orjson>3.9",
    "packaging>23",
    "xmltodict>=0.13.0",
]

[project.optional-dependencies]
requirements = [
    "httpx==0.27.0",
    "orjson==3.9.15",
    "packaging==24.0",
    "xmltodict==0.13.0",
]
requirements_test = [
    "mypy==1.9.0",
    "pytest==8.1.1",
    "pytest-aiohttp==1.0.5",
    "pytest-asyncio==0.23.6",
    "pytest-cov==4.1.0",
    "respx==0.21.0",
    "ruff==0.3.3",
    "types-orjson==3.6.2",
    "types-xmltodict==v0.13.0.3",
]
requirements_dev = [
    "pre-commit==3.6.2"
]

[project.urls]
"Source Code" = "https://github.com/Kane610/axis"
"Bug Reports" = "https://github.com/Kane610/axis/issues"
"Forum" = "https://community.home-assistant.io/t/axis-camera-component/"

[project.scripts]
axis = "axis.__main__:main"

[tool.coverage.report]
fail_under = 95
exclude_also = [
    "if TYPE_CHECKING:"
]

[tool.setuptools.packages.find]
include = ["axis*"]

[tool.setuptools.package-data]
"axis" = ["py.typed"]

[tool.mypy]
python_version = "3.11"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
no_implicit_optional = true
no_implicit_reexport = true
strict_equality = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true

[tool.pytest.ini_options]
addopts = "--cov=axis --cov-report term-missing"
asyncio_mode = "auto"
log_cli = false
log_cli_level = "DEBUG"
testpaths = ["tests"]

[tool.ruff]
target-version = "py311"
lint.select = [
    "B002", # Python does not support the unary prefix increment
    "B005", # Using .strip() with multi-character strings is misleading
    "B007", # Loop control variable {name} not used within loop body
    "B014", # Exception handler with duplicate exception
    "B015", # Pointless comparison. Did you mean to assign a value? Otherwise, prepend assert or remove it.
    "B018", # Found useless attribute access. Either assign it to a variable or remove it.
    "B023", # Function definition does not bind loop variable {name}
    "B026", # Star-arg unpacking after a keyword argument is strongly discouraged
    "B032", # Possible unintentional type annotation (using :). Did you mean to assign (using =)?
    "C",    # complexity
    "COM818", # Trailing comma on bare tuple prohibited
    "D", # docstrings
    "E", # pycodestyle
    "F", # pyflakes/autoflake
    "G", # flake8-logging-format
    "I", # isort
    "ICN001", # import concentions; {name} should be imported as {asname}
    "ISC", # flake8-implicit-str-concat
    "LOG", # flake8-logging
    "N804", # First argument of a class method should be named cls
    "N805", # First argument of a method should be named self
    "N815", # Variable {name} in class scope should not be mixedCase
    "PERF", # A Linter for performance anti-patterns
    "PGH004", # Use specific rule codes when using noqa
    "PIE",  # flake8-pie
    "PL",   # pylint
    "PERF", # Perflint
    "RSE",  # flake8-raise
    "RUF005", # Consider iterable unpacking instead of concatenation
    "RUF006", # Store a reference to the return value of asyncio.create_task
    "RUF100", # Unused `noqa` directive
    "S307", # No builtin eval() allowed
    "SIM",  # flake8-simplify
    "T100", # Trace found: {name} used
    "T20",  # flake8-print
    "UP", # pyupgrade
    "W",  # pycodestyle
]

lint.ignore = [
    "D203", # 1 blank line required before class docstring
    "D213", # Multi-line docstring summary should start at the second line
    "E501", # Checks for lines that exceed the specified maximum character length
    "PLR0912", # Maximum number of branches allowed for a function or method body
    "PLR0913", # Too many arguments to function call ({c_args} > {max_args})
    "PLR0915", # Too many statements ({statements} > {max_statements})
    "PLR2004", # Magic value used in comparison, consider replacing {value} with a constant variable
]

[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = false

[tool.ruff.lint.isort]
force-sort-within-sections = true
known-first-party = ["axis"]
combine-as-imports = true

[tool.ruff.lint.mccabe]
max-complexity = 25
